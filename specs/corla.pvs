%%% model of the Colorado Risk Limiting Audit (CORLA) tool.
%%% Joe Kiniry
%%% 11-13 July 2017

%%% This document contains a formal specification of the ColoradoRLA
%%% system/tool. It is written in a literate style using the PVS
%%% theorem prover. Writing system specifications in this fashion is
%%% called (formal) domain engineering. Our formal domain model is
%%% written in PVS's higher-order logic (HOL). Our informal domain
%%% model is written in the Free & Fair System Specification Language,
%%% or FAFESSL for short. FAFESSL is a daughter of Extended BON which
%%% was, in turn, a daughter of BON, the Business Object Notation.

%%% See our Bibliography project for more information.
%%% https://github.com/FreeAndFair/Bibliography

%%% In order to relate PVS to FAFESSL, we must define a refinement
%%% relationship between their two type systems. Informally, that
%%% mapping is described in the following paragraph.

%%% We map PVS public theories and their contents to FAFESSL constructs.
%%% The top-level corla theory maps to the FAFESSL system specification,
%%% theories map to clusters, (PVS) types map to (FAFESSL) types, and
%%% functions map to features.  We use special comments to denote
%%% informal specifications which will be extracted using a shell script
%%% into a well-typed FAFESSL informal domain model specification. 

%%% As mentioned above, we write formal specifications using a
%%% literate style, a la Knuth. Doing so permits us to document our
%%% thinking and the system design, from domain modeling and
%%% engineering all of the way to formal specification and
%%% verification, in a fashion that produces beautifully printed
%%% books and interactive hypertext.

%%% In order to write literate PVS we use our old friend Adriaan de
%%% Groot's scripts available via
%%% http://www.cs.kun.nl/~adridg/research/PVS-literate.html

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%% Here is a cheat sheet for literate PVS.

%%%%%% Six percent signs (yes, %%%%%%) are meta-comments and are
%%%%%% deleted from the output in all processing modes. I Typically
%%%%%% use these comments for the copyright header at the top of the
%%%%%% file and to set off blocks of PVS code from each other.

%%%%%% Three percent signs (%%%) are output as regular text in the
%%%%%% file mode. The text after the percent signs can contain
%%%%%% whatever LaTeX commands you like -- it's output as-is. In block
%%%%%% mode, three percent sign comments are deleted from the output.

%%%%%% One percent sign (%) is output as regular text in block mode
%%%%%% and deleted in file mode.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%% Our formal domain model is also annotated with structured comments
%%% in precise natural language using a standard set of annotation.  A
%%% shell script processes these annotations and generates a
%%% well-typed informal FAFESSL specification.

%%% The FAFESSL annotations we use are as follows:
%%% \begin{description}
%%% \item[@system] the FAFESSL name of the system
%%% \item[@cluster] the FAFESSL name of a cluster
%%% \item[@explanation] the explanation for an artifact
%%% \item[%description] a short description of an artifact
%%% \item[@indexing-<CLAUSE>] a prefix for any indexing <CLAUSE>
%%% \end{description}

%%% These suffixes are commonly used:
%%% \begin{description}
%%% \item[author] an author of an artifact
%%% \item[organization] an organization responsible for an artifact
%%% \item[keywords] a comma-separated list of keywords
%%% \item[created] the creation date for an artifact
%%% \item[github] the URL for the GitHub project containing an artifact
%%% \end{description}

%%% \section{System Overview}

%%% The RLA Tool is being developed by Free & Fair for the Colorado
%%% Department of State (CDOS henceforth). The RLA Tool facilitates
%%% running a risk limiting audit across several jurisdictions. In the
%%% case of Colorado, it facilitates running risk limiting audits
%%% across all counties in the state simultaneously.

%%% The Colorado election law pertaining to election audits is "TBD",
%%% and the rule pertaining such are found in the "Revised Draft of
%%% Proposed Rules" whose latest version is labeled CCR 1505-1 and
%%% dated July 6, 2017. Section 25, Post-Election Audit, of that
%%% document is the salient portion of that document.

%%% This domain model is based upon that law, its rules, our contract,
%%% our bibliography of publications about risk-limiting audits, etc.

%%%%%% Literate PVS comments +BEGIN and +END denote blocks. A block
%%%%%% named "foo" is written to a LaTeX file "foo.tex".

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%+BEGIN background

%%% \section{Background Model Elements}

%%% There are a number of background concepts from computer science
%%% that are necessary to summarize in order to formalize the RLA
%%% Tool.

%%% The RLA Tool is a client-server system. The server is implemented
%%% in Java and runs on servers hosted by CDOS. The client is
%%% implemented in TypeScript and Javascript and runs in modern web
%%% browsers.

%%% As we are hosting the RLA Tool in CDOS's system, they are
%%% providing the hosting servers, network, and a number of services
%%% in support of the tools deployment and management.

%%% A database is used in order to store all of the data relevant to
%%% audits. Databases contain tables which describe the information
%%% that they contain. We need not formalize database elements in any
%%% more detail than what follows.

database: THEORY
BEGIN
  database_table: TYPE
  data: TYPE
  database: TYPE = setof[database_table]
% @description Write this data to that table in that database!
  write: [database, database_table, data -> database]
% @description What is the data in that table of that database?
  read: [database, database_table -> data]
END database

%%% We also need to be able to talk about some pretty simple ideas
%%% from information systems.  For example, many files in election
%%% systems are syntactically just lists of comma-separate
%%% values. Email is used to for communication between officials and
%%% with the public. Files are used to store information in a
%%% persistent fashion. Consequently, we introduce a few types for
%%% these ideas.
% @review How are emails (for SoS admin, for County Audit Admins, 
% presumably, and for whom else?) put into the system? Is this a 
% standard part of the authentication process?

information_systems: THEORY
BEGIN
% @description A list of values of arbitrary types and syntax,
% separated by commas.
  comma_separated_value: TYPE
% The csv type is an example of how how to introduce a type synonym
% in PVS.
  csv: TYPE = comma_separated_value
  email: TYPE
  email_address: TYPE
  file: TYPE
  network: TYPE
  web_browser: TYPE
  browser: TYPE = web_browser
  javascript_code: TYPE
END information_systems

%%% There are several kinds of servers necessary to deploy this
%%% system.  At the minimum, two of each of a web server, time (NTPD)
%%% server, a firewall, and a database server is necessary. Two
%%% servers of each class are necessary for redundancy to fulfill
%%% availability requirements. Preferably rendundant servers would be
%%% hosted in separate facilities, with separate and independent power
%%% systems and networks.

% @relation web_server inherit server
% @relation time_server inherit server
% @relation firewall inherit server
% @relation database_server inherit server
server: DATATYPE WITH SUBTYPES
  web_server, time_server, firewall, database_server
BEGIN
  IMPORTING information_systems, database
  
  web_server?: make_web_server: web_server
  time_server?: make_time_server: time_server
  firewall?: make_filewall: firewall
  database_server?(databases: set[database]): make_database_server: database_server
END server

%%% Over time, as we need to introduce more background concepts, we
%%% will add them to this theory.

%+END background

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%+BEGIN elections

%%% \section{Elections}

%%% Elections have a number of general concepts necessary to specify
%%% the RLA Tool. Some are generic to all elections, and others are
%%% specifiec to Colorado.

elections: THEORY
BEGIN
%%% Voters are the most important concept in elections, as they are
%%% who elections are for, and who should make the choices that
%%% determine the outcome of legitimate elections. Some voters are
%%% UOCAVA voters. What follows is one way to formalize such, simply
%%% stating that the type uocava_voter is a predicate on the type
%%% voter. Consequently, all voters are UOCAVA or not.
  person: TYPE
  voter: TYPE FROM person
  uocava_voter: TYPE from voter

%%% The dual of voters are candiates, who run for office to represent
%%% voters. Note that a person can be either a voter, a candidate,
%%% both, or neither.
  candidate: TYPE FROM person

%%% Elections focus on contests, each of which represents a set of
%%% choices that voters can make. Making a legal choice ranges
%%% enormously across the Earth, from marking a vote for a candidate
%%% by filling in a single bubble to enumerating a total order on all
%%% choices in a contest. Across a given ballot, each contest has a
%%% unique name.
% @review CDOS will there be one risk limit? If more than one, then
% system must provide a way to map contests to risk limits.

  contest: TYPE
  contest_name?: [contest -> string]
% @todo Contest name uniqueness.

%%% Elections are defined across cohorts of voters arranged in any
%%% number of ways---geographic, political, professional, and more. In
%%% Colorado, elections are organized across counties, and the entire
%%% state. Each county has a name and a county number, both of which
%%% are unique across the whole state.

  county: TYPE
  county_name?: [county -> string]
  county_number?: [county -> nat]
  state: TYPE = set[county]

  s: VAR state
  c1, c2: VAR county

  county_names_unique: AXIOM
  (FORALL s, c1, c2: county_name?(c1) = county_name?(c2)
    IMPLIES c1 = c2)
  county_numbers_unique: AXIOM
  (FORALL s, c1, c2: county_number?(c1) = county_number?(c2)
    IMPLIES c1 = c2)
  
  election_canvass: TYPE
  political_party: TYPE
  audit_center: TYPE
END elections

% @relation state_election inherit election
election: DATATYPE WITH SUBTYPES state_election
BEGIN
  IMPORTING elections
  
  is_state_election?(s: state, c: set[contest]): make_state_election: state_election
END election

%+END elections

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%+BEGIN ballots

%%% \section{Ballots}

%%% The second basic concept of elections that we need to specify is
%%% ballots. Ballots are the means by which voters indicate their
%%% preferences for candidates in contests and choices in ballot
%%% questions.

ballots: THEORY
BEGIN
  IMPORTING elections

%%% Several of our concepts are simply numbers. For example, ballot
%%% identifiers (ids), batch numbers, and batch sizes are all just
%%% natural numbers (integers starting from zero).

  ballot_id: TYPE = nat
  batch_number: TYPE = nat
  batch_size: TYPE = nat

%%% Ballots are marked by voters or ballot marking devices.  A ballot
%%% mark is any kind of mark made on a ballot that is not found on a
%%% blank ballot. A voter_marking is any mark made by a voter. An
%%% ambiguous mark is a mark for which there is ambiguity in its
%%% interpretation (voter or machine). A stray mark is a mark that is
%%% outside of the legitimate regions of a ballot, such as hesitation
%%% marks outside of the mark regions for a contest or marks made by
%%% coffee spilled on a paper ballot.

  ballot_mark: TYPE
  voter_marking: TYPE FROM ballot_mark
  ambiguous_mark: TYPE FROM ballot_mark
  stray_mark: TYPE FROM ballot_mark

%%% Ballots come in several varieties.  All ballots are either
%%% represented in a digital fashion (a scan, PDF, etc.) or are paper
%%% ballots, or both. Ballots are also classifed based upon where they
%%% originate, such as ballots delivered via mail, UOCAVA ballots,
%%% early ballots, etc. Ballots are also either tabulated or not. Note
%%% that none of these categories of ballots are mutually exclusive.

% @description The legally recognized means by which a voter can
% express his or her choices in one or more contests in an election.
  ballot: TYPE
  digital_ballot: TYPE FROM ballot
  paper_ballot: TYPE FROM ballot
  mail_ballot: TYPE FROM ballot
  uocava_ballot: TYPE FROM ballot
  early_ballot: TYPE FROM ballot
  tabulated_ballot: TYPE FROM ballot

%%% Each ballot has a single ballot style, which indicates (at least)
%%% the contests that are listed on that ballot. Usually ballot styles
%%% are encoded through the use of natural numbers.

% @description The concrete presentation of a ballot configuration.
  ballot_style: TYPE = nat
  ballot_style?: [ballot -> ballot_style]

% @description A decision to be made, either the selection of one or
% more candidates for an office or the choice of a course of action.
  ballot_contest: TYPE = contest
  choice: TYPE

% @description A batch is a set of ballots.  
  batch: TYPE = set[ballot]

%%% Several terms are underspecified at this time and need elucidation
%%% or elimination. They are as follows:a

  ballot_manifest: TYPE
  imprinted_ballot: TYPE
  ballot_certification: TYPE

END ballots

%%% The interpretation of the meaning of a voter's choice in a single
%%% ballot contest is either a legal vote, an overvote, or an
%%% undervote.

% @relation well_formed_vote inherit vote
% @relation overvote inherit vote
% @relation undervote inherit vote
vote: DATATYPE WITH SUBTYPES well_formed_vote, overvote, undervote
BEGIN
  IMPORTING ballots

% @description A legal selection of zero or more choices in a ballot contest.
  well_formed_vote?(choices:set[choice]): make_well_formed_vote: well_formed_vote
% @description A (typically deemed improper) selection of too many
% choices in a ballot contest.
  overvote?(choices:set[choice]): make_overvote: overvote
% @description A (sometimes deemed improper) selection of too few
% choices in a ballot contest.
  undervote?(choices:set[choice]): make_undervote: undervote
END vote

ballot_interpretation: THEORY
BEGIN
  IMPORTING ballots, vote

% @description A CVR is a cast vote record denoting the interpretation
% of a set of votes for a specific election and a single voter.
  cast_vote_record: TYPE = set[vote]

END ballot_interpretation

%%% Ballots are stored by one of several possible means. Some ballot
%%% storage mechanisms are secure, others are not. Some facilitate an
%%% easy means by which to find a particular ballots, others do not.

% @relation box inherit ballot_storage
% @relation bin inherit ballot_storage
% @relation ballot_box inherit ballot_storage
ballot_storage: DATATYPE WITH SUBTYPES box, bin, ballot_box
BEGIN
  IMPORTING ballots
  
  box?(ballots:list[ballot]): make_box: box
  bin?(ballots:list[ballot]): make_bin: bin
  ballot_box?(ballots:list[ballot]): make_ballot_box: ballot_box

% @todo add "secure: pred[ballot_storage]"

END ballot_storage

ballots_collections: THEORY
BEGIN
  IMPORTING ballots

%%% Ballots are often ordered, such as after they are hand or machine
%%% sorted, when they are kept in storage that maintains order, or an
%%% order is induced upon them by a random shuffle.
  ballot_order: TYPE = list[ballot]

%%% Sometimes, but not always, a total order is induced by ballot ids.
% @todo Introduce something like
% < (b1: ballot, b2: ballot): bool
% ballot_ids_unique_and_induce_order: POSTULATE strict_total_order?(<)

END ballots_collections

%+END ballots

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%% Elections have all kinds of different published instructions,
%%% forms, and reports. We enumerate a few here that are specific to
%%% Colorado, and the RLA Tool in particular.

instructions_forms_reports: THEORY
BEGIN
  audit_report: TYPE
  ballot_instructions: TYPE
  sos_audit_form: TYPE
  sos_voter_intent_guide: TYPE
END instructions_forms_reports

%%% Within the RLA Tool there are a number of roles that a person
%%% involved with the system can take on. Some of these roles are
%%% mutually exclusive due to legal reasons.

roles: THEORY
BEGIN
  IMPORTING elections

  audit_board_member: TYPE FROM person
  canvas_board: TYPE = set[person]

  colorado_department_of_state: TYPE
  cdos: TYPE = colorado_department_of_state

  sos: TYPE FROM person
  state?: [sos -> state]

  county_clerk: TYPE FROM person
  county?: [county_clerk -> county]
% @review CDOS If names of audit board members are to be visible
% on the public website, are they published directly by the 
% County Audit Admins? If not, to whom do the County 
% Admins submit the names, and by whom are the names published 
% to the public website? What happens if a County
% fails to submit names?

% @review CDOS Roles that are currently under-defined and need
% clarity. In particular, are there any lurking restrictions in roles
% such that a person cannot have two kinds of roles
% simultaneously. E.g., can a candidate be an audit board of their own
% election? Can an county administrator be a candidate? Can the SOS be
% an audit board member? Etc.
  administrator: TYPE FROM person
  audit_supervisor: TYPE FROM person
% @contraint CDOS states that they want to start with at least one
% designated official per county, but must have the ability to create
% credentials for additional users.
% @trace email from Jerome Lovato on 12 July 2017
  county_administrator: TYPE FROM person
  state_administrator: TYPE FROM person
  
% @review CDOS Who bootstraps authentication? Who has the right to
% identify people who should have credentials and generate and issue
% those credentials? How do they (singular or plural) authenticate to
% the system. We'll put in place a bootstrapping role for the moment,
% the system administrator.
% @review CDOS while members of the audit board might not 
% be authenticated
% users of the RLA tool, they do "sign off" on the audit they performed. 
% Do they also "sign in" before audit starts?

% @review CDOS what happens if the Audit Board cannot find 
% the ballot expected by the RLA tool?

  system_administrator: TYPE FROM person
END roles

canvas_boards: THEORY
BEGIN
  IMPORTING roles, election

  canvas_board?: [election -> canvas_board]
END canvas_boards

randomness: THEORY
BEGIN
  unit: TYPE
  seed: TYPE = nat
  rng: TYPE = [unit -> nat]
  seeded_prng: TYPE = [seed -> rng]
END randomness

cryptography: THEORY
BEGIN
  hash: TYPE
END cryptography

audits: THEORY
BEGIN
  IMPORTING roles
  
  audit: TYPE
%%% @review CDOS Must audit boards have a minimum number of members?  A maximum?
  audit_board: TYPE = set[audit_board_member]
  audit_mistake: TYPE
  audit_progress: TYPE
  ballot_polling_audit: TYPE
  ballots_to_audit: TYPE
  contest_margin: TYPE
  digital_ballot_adjudication: TYPE
  manual_ballot_adjudication: TYPE
  margin: TYPE
  random_audit: TYPE
END audits

rlas: THEORY
BEGIN
  RLA: TYPE
  discrepency: TYPE
  random: TYPE
  risk_limit: TYPE
  sample_size: TYPE
  wrong_outcome: TYPE
END rlas

elections_equipment: THEORY
BEGIN
  dominion_voting_system: TYPE
  scanner: TYPE
  scanner_id_number: TYPE
  voting_system: TYPE
  vvpat: TYPE
END elections_equipment

%+BEGIN dashboards

%%% \section{Dashboards}

%%% The system has several dashboards that are the main user
%%% interfaces to the system. State officials use the state-wide
%%% dashboard; county officials use the county dashboard; audit board
%%% members use the audit board dashboard; and the general public uses
%%% the public dashboard.

% @relation state_wide_dashboard inherit dashboard
% @relation county_dashboard inherit dashboard
% @relation audit_board_dashboard inherit dashboard
% @relation public_dashboard inherit dashboard
dashboard: DATATYPE WITH SUBTYPES
  state_wide_dashboard, county_dashboard, audit_board_dashboard, public_dashboard
BEGIN
% @description The overall status of the state-wide audit is
% summarized in the state-wide dashboard.
  state_wide_dashboard?: make_state_wide_dashboard: state_wide_dashboard
% @description The county dashboard is used to communicate with CDOS,
% setup the local RLA, and observe the status of the ongoing or
% finished RLA.
  county_dashboard?: make_county_dashboard: county_dashboard
% @description The audit board dashboard is used by the audit board
% members to understand the state of the audit and to facilitate the
% audit each ballot under audit.
  audit_board_dashboard?: make_audit_board_dashboard: audit_board_dashboard
% @description The public dashboard is used by the general public to
% understand the state of the current state RLA.
  public_dashboard?: make_public_dashboard: public_dashboard
END dashboard

% @trace TBD
state_wide_dashboard: THEORY
BEGIN
  IMPORTING dashboard
% @explanation The status of uploaded data will be summarized in a
% state-wide dashboard, along with information on which counties have
% not yet uploaded their CVRs, and uploads that have formatting or
% content issues. The status of data, and results as audits are
% performed, will be provided for each contest to be audited.

END state_wide_dashboard

% @trace TBD
county_dashboard: THEORY
BEGIN
  IMPORTING dashboard, information_systems, upload_system_message,
            election, roles
% @explanation 

%%% English description of uploading.

  upload_confirmation: [dashboard ->
                        [email, upload_system_message]]

% @todo kiniry Refine these definitions from dashboard to
% county_dashboard.
% @description This county clerk upload that ballot manifest and its
% hash for this election!
% @trace Task order #1, Exhibit A
%  upload_ballot_manifest: [dashboard, authenticated, ballot_manifest, hash ->
%                           [dashboard, upload_system_message]]
% @description TBD
%  upload_cvrs: [dashboard, authenticated, cvr_file, hash ->
%                [dashboard, upload_system_message]]
  county_upload_scenario: [state_election, county_clerk ->
                           upload_system_message]

END county_dashboard

% @trace TBD
audit_board_dashboard: THEORY
BEGIN
  IMPORTING dashboard
% @explanation 

END audit_board_dashboard

% @trace TBD
public_dashboard: THEORY
BEGIN
  IMPORTING dashboard
% @explanation 

END public_dashboard

%+END dashboards

%+BEGIN CVRs

%%% \section{Cast Vote Records}

%%% Cast vote records, also knows as CVRs, are the digital
%%% interpretations of paper ballot records by a computer. They
%%% frequently, but not always, contain an interpretation of all
%%% contests on ballot. CVRs are sometimes syntactically written as
%%% comma-separated values, and other times in plain English. Some
%%% CVRs use a election-specific encoding scheme to represent choices
%%% (e.g., a '1' means "John Doe"); others use plain English.

%%% CDOS requirements mandate that CVRs are exported and uploaded to
%%% the RLA back-end as CSV files by county official using their voting
%%% system and the RLA Tool, respectively.

% @todo kiniry For a given election, there must be a 1-1
% correspondance between its ballots and its cvrs.

cast_vote_records: THEORY
BEGIN
  IMPORTING vote, information_systems
  
  cvr: TYPE = set[vote]
% @trace Task order #1, Exhibit A
  as_csv: [cvr -> csv]
  cvr_file: TYPE = [set[cvr] -> file]

% @todo It is unclear what a CVR number is, if anything.
  cvr_number: TYPE = nat
END cast_vote_records

%+END CVRs

%% Authentication is currently underspecified in our system design as
%% we do not yet have information from CDOS on the nature and kind of
%% their mandated two-factor authentication system. Consequently, we
%% have only modeled the necessary concepts and features of any
%% two-factor authentication system. Included in this model are the
%% ideas of usernames, passwords, other authentication factors
%% mentioned in CDOS documents (such as biometrics and physical
%% tokens, such as smartcards or one-time authentication code books),
%% etc.

%%% Given that CDOS is issuing two-factor authentications, it is
%%% unclear if they want any additional features, such as a password
%%% reset.

% @review kiniry Once we better understand CDOS's authentication
% system, we will better know what authentication features we can
% support.

authentication: THEORY
BEGIN
  IMPORTING roles, dashboard, election, dashboard,
            information_systems, upload_system_message, ballots,
            cryptography, cast_vote_records
  
% @description A credential is the general idea of having some
% knowledge or thing to permit one to authenticate to a system. Many
% authentication systems mandate the use of multiple credentials.
  credential: TYPE 
  username: TYPE FROM credential
  password: TYPE FROM credential
% @trace Task order 1, page 4, "Uptime/Security"
  complex_enough?: [password -> bool]
% complex_check_update: [complex_enough? -> ?]
  biometric: TYPE FROM credential
  physical_token: TYPE FROM credential

% @description One has authentication if a person has the appropriate
% combination of identity and set of credentials.
  authentication: TYPE FROM [person, set[credential]]
% @description Two-factor authentication is a currently-popular form
% of authentication that requires more than just knowledge (say, of a
% username and password), and at least one physical mechanism, such as
% a biometric or a physical token.
  two_factor_authentication: TYPE =
    [[username, password], [physical_token + biometric]]

%%% In order to obtain a new, valid credential, some authority must
%%% issue credentials to a specific person.
  issue_credential: TYPE =
    [cdos, state_election, person -> [person, two_factor_authentication]]

%%% What are the credentials that have been issued to this person?
  credential?: [person -> two_factor_authentication]

%%% Is this person authenticated?
  authenticated: [person, two_factor_authentication -> bool]

%%% What follows are several features used to authenticate various
%%% roles to their respective dashboards.

%%% Each dashboard has an abstract state machine that captures the
%%% dashboard's workflow and consequntly identifies which features are
%%% visible to its users at various stages. Those abstract state
%%% machines and features are modeled in the dashboard modules
%%% below. We focus only on authentication here.

% @todo kiniry Introduce an authentication monad and a state monad for
% our ASMs.

% @description Authenticate this county administrator to that county dashboard.
  authenticate_county_administrator:
    [county_dashboard, county_administrator, two_factor_authentication -> bool]
% @description Authenticate this state administrator to that state-wide dashboard.
  authenticate_state_administrator:
    [state_wide_dashboard, state_administrator, two_factor_authentication -> bool]
END authentication

%%% The user interfaces of the system are the visible interactive
%%% parts of an application. There are several different user
%%% interfaces in the RLA Tool. The precise names of these interfaces
%%% is still under discussion, but basically one is for CDOS personnel
%%% responsible for the audit at the state-level, one is for county
%%% personnel at the county-level, and one is for audit board members.

user_interface: DATATYPE
BEGIN
  uploading_interface?: uploading_interface
  cvr_uploading_interface?: cvr_uploading_interface
  county_auditing_interface?: county_auditing_interface
  audit_adjudication_interface?: audit_adjudication_interface
END user_interface

%%% After a county administrator attempts to upload artifacts to the
%%% RLA system's server, one of several different messages is shown.
%%% Each is self-explanatory in this domain model, and each must be
%%% used in a scenario of the system.

% @relation ok inherit upload_system_message
% @relation hash_wrong inherit upload_system_message
% @relation file_type_wrong inherit upload_system_message
% @relation data_transmission_interrupted inherit upload_system_message
% @relation too_late inherit upload_system_message
upload_system_message: DATATYPE
  WITH SUBTYPES upload_successful, hash_wrong, file_type_wrong,
                data_transmission_interrupted, too_late
BEGIN
  upload_successful?: make_upload_successful: upload_successful
  hash_wrong?: make_hash_wrong: hash_wrong
  file_type_wrong?: make_file_type_wrong: file_type_wrong
  data_transmission_interrupted?: make_data_transmission_interrupted:
    data_transmission_interrupted
  too_late?: make_too_late: too_late
END upload_system_message

%%% Authentication attempts can result in two different kinds of
%%% message: either a person authenticated successfully, or they did
%%% not.

% @relation successful_authentication inherit authentication_message
% @relation unsuccessful_authentication inherit authentication_message
authentication_message: DATATYPE
  WITH SUBTYPES successful_authentication, unsuccessful_authentication
BEGIN
  successful_authentication?: make_successful_authentication:
    successful_authentication
  unsuccessful_authentication?: make_unsuccessful_authentication:
    unsuccessful_authentication
END authentication_message

%%% As mentioned early in this chapter, the RLA Tool is a
%%% client-server system. As usual for these kinds of systems, the
%%% server part of this architectural style is known as the back-end
%%% and the client part as the front-end.

% @relation back_end inherit system_architecture_component
% @relation front_end inherit system_architecture_component
system_architecture_component: DATATYPE WITH SUBTYPES back_end, front_end
BEGIN
  IMPORTING information_systems, database, server

  back_end?(servers: set[server],
            networks: set[network],
            databases: set[database]): make_back_end: back_end
  front_end?(web_browser: web_browser,
             code: javascript_code): make_front_end: front_end
END system_architecture_component

%%% The RLA system focuses on a single election and has a back-end and
%%% a front-end.

% @review kiniry Should we design the system so that we can facilitate
% mutiple concurrent elections?

rla_system: DATATYPE
BEGIN
  IMPORTING election, system_architecture_component
  
  rla_system(election: state_election,
             front_end: front_end,
             back_end: back_end): make_rla_system
END rla_system

%%% The system architecture consists of:
%%% \begin{enumeration}
%%% \item several servers of different kinds deployed and configured
%%% in a redundant fashion as described elsewhere.
%%% \item several databases whose tables and data are transactionally
%%% identical. Meaning, after each transaction completes, all
%%% databases are guaranteed to never witness to a client an
%%% inconsistent state relative to that transaction.
%%% \item a Javascript-based front-end whose code comes only from the
%%% system's web servers.
%%% \item HTTPS-based connections between the front-end and the
%%% back-end over which the web application transmits data, including
%%% new HTML pages, style sheets, data input by the web browser user,
%%% etc.
%%% \end{enumeration}

system_architecture: THEORY
BEGIN
  IMPORTING system_architecture_component, server, rla_system

  rla: VAR rla_system
  be: VAR back_end
  fe: VAR front_end
  db1, db2: VAR database_server

  make_rla_system: [back_end, front_end -> rla_system]

  javascript_code?: [front_end -> javascript_code]
  code_origins?: [javascript_code -> web_server]
  
%%% The front-end, which recall is written in TypeScript and
%%% Javascript, is provided to a web browser client directly from the
%%% web server.
  browser_code_origins: AXIOM
    (FORALL (rla):
      member(code_origins?(code(fe)), servers(be))
      WHERE fe = front_end(rla), be = back_end(rla))

% @description Are these databases transactionally synchronized?
  transactionally_synchronized?: [set[database] -> bool]

%%% The back-end consists of two or more servers, two or more
%%% networks, and two or more databases. The minimum cardinality of
%%% these three sets is two because the system must have redundancy to
%%% be fault tolerant and not have a single point of failure.
  redundancy: AXIOM
    (FORALL (be): 2 <= card(servers(be))
              AND 2 <= card(networks(be))
              AND 2 <= card(databases(be)))
%%% Multiple databases entails having multiple synchronized database
%%% servers amongst the back-end's servers. Note that our model is
%%% simplified here insofar as we are presuming that all databases
%%% across synchronized database servers are synchronized. It is
%%% certianly possible to deploy synchronized databases in a fashion
%%% that does not fulfill this requirement, but for all of those
%%% databases relevant to this system, this requirement does hold.
  database_redundancy: AXIOM
    (FORALL (be): EXISTS (db1, db2):
      member(db1, servers(be)) AND member(db2, servers(be))
  AND db1 /= db2
  AND transactionally_synchronized?(union(databases(db1),databases(db2))))
END system_architecture

%%% Thus, the overall domain model of this system is the sum total of
%%% all concepts introduced in this chapter.

terminology: THEORY
BEGIN
  IMPORTING
% @description "TBD"
    ballots,
% @description "TBD"
    elections,
% @description "TBD"
    audits,
% @description "TBD"
    instructions_forms_reports,
% @description "TBD"
    roles,
% @description "TBD"
    randomness,
% @description "TBD"
    cryptography,
% @description "TBD"
    rlas,
% @description "TBD"
    elections_equipment,
% @description "TBD"
    authentication,
% @description "TBD"
    cast_vote_records,
% @description "TBD"
% @review CDOS what is the source of info
% presented to audit board to tell them which paper ballot
% they should examine next? Is it the CVR alone that is 
% the source? And what information must the audit board 
% enter into the system to ascertain that the paper
% ballot they are holding does in fact match the CVR
% that will be compared to their interpretation? Will 
% the audit board simply click "Yes, this is the right 
% paper ballot"? Or will they have to enter some confirming 
% piece of information (e.g., ballot style, a ballot ID number?).
% @review CDOS if the audit has several "rounds",
% does the Audit Board need to "sign" after each
% round?
    user_interface,
% @description "TBD"
    dashboard,
% @description "TBD"
    database,
% @description "TBD"
    information_systems,
% @description "TBD"
    system_architecture
END terminology

% @system CORLA_SYSTEM
% @indexing-author Joseph Kiniry <kiniry@freeandfair.us>
% @indexing-organization Free & Fair
% @indexing-keywords Free & Fair
% @indexing-created Free & Fair
% @indexing-github Free & Fair
% @explanation "TBD"
corla: THEORY
BEGIN
  IMPORTING
% @description "TBD"
    terminology
END corla
